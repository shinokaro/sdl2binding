module SDL2
  #
  # SDL_pixels.h
  #
  require_relative 'SDL_stdinc'

  SDL_ALPHA_OPAQUE      = 255
  SDL_ALPHA_TRANSPARENT = 0

  SDL_PIXELTYPE_UNKNOWN  = 0
  SDL_PIXELTYPE_INDEX1   = 1
  SDL_PIXELTYPE_INDEX4   = 2
  SDL_PIXELTYPE_INDEX8   = 3
  SDL_PIXELTYPE_PACKED8  = 4
  SDL_PIXELTYPE_PACKED16 = 5
  SDL_PIXELTYPE_PACKED32 = 6
  SDL_PIXELTYPE_ARRAYU8  = 7
  SDL_PIXELTYPE_ARRAYU16 = 8
  SDL_PIXELTYPE_ARRAYU32 = 9
  SDL_PIXELTYPE_ARRAYF16 = 10
  SDL_PIXELTYPE_ARRAYF32 = 11

  SDL_BITMAPORDER_NONE = 0
  SDL_BITMAPORDER_4321 = 1
  SDL_BITMAPORDER_1234 = 2

  SDL_PACKEDORDER_NONE = 0
  SDL_PACKEDORDER_XRGB = 1
  SDL_PACKEDORDER_RGBX = 2
  SDL_PACKEDORDER_ARGB = 3
  SDL_PACKEDORDER_RGBA = 4
  SDL_PACKEDORDER_XBGR = 5
  SDL_PACKEDORDER_BGRX = 6
  SDL_PACKEDORDER_ABGR = 7
  SDL_PACKEDORDER_BGRA = 8

  SDL_ARRAYORDER_NONE = 0
  SDL_ARRAYORDER_RGB  = 1
  SDL_ARRAYORDER_RGBA = 2
  SDL_ARRAYORDER_ARGB = 3
  SDL_ARRAYORDER_BGR  = 4
  SDL_ARRAYORDER_BGRA = 5
  SDL_ARRAYORDER_ABGR = 6

  SDL_PACKEDLAYOUT_NONE    = 0
  SDL_PACKEDLAYOUT_332     = 1
  SDL_PACKEDLAYOUT_4444    = 2
  SDL_PACKEDLAYOUT_1555    = 3
  SDL_PACKEDLAYOUT_5551    = 4
  SDL_PACKEDLAYOUT_565     = 5
  SDL_PACKEDLAYOUT_8888    = 6
  SDL_PACKEDLAYOUT_2101010 = 7
  SDL_PACKEDLAYOUT_1010102 = 8

  SDL_DEFINE_PIXELFOURCC = -> (a, b, c, d) { SDL_FOURCC[a, b, c, d] }

  SDL_DEFINE_PIXELFORMAT = -> (type, order, layout, bits, bytes) {
    ((1 << 28) | (type << 24) | (order << 20) | (layout << 16) | (bits << 8) | (bytes << 0))
  }

  SDL_PIXELFLAG     = -> (x) { ((x >> 28) & 0x0F) }
  SDL_PIXELTYPE     = -> (x) { ((x >> 24) & 0x0F) }
  SDL_PIXELORDER    = -> (x) { ((x >> 20) & 0x0F) }
  SDL_PIXELLAYOUT   = -> (x) { ((x >> 16) & 0x0F) }
  SDL_BITSPERPIXEL  = -> (x) { ((x >> 8)  & 0xFF) }
  SDL_BYTESPERPIXEL = -> (x) {
      (SDL_ISPIXELFORMAT_FOURCC[x] ?
           (((x == SDL_PIXELFORMAT_YUY2) || (x == SDL_PIXELFORMAT_UYVY) || (x == SDL_PIXELFORMAT_YVYU)) ? 2 : 1) :
           ((x >> 0) & 0xFF))
  }

  SDL_ISPIXELFORMAT_INDEXED = -> (format) {
    (!SDL_ISPIXELFORMAT_FOURCC[format] &&
        ((SDL_PIXELTYPE[format] == SDL_PIXELTYPE_INDEX1) || (SDL_PIXELTYPE[format] == SDL_PIXELTYPE_INDEX4) || (SDL_PIXELTYPE[format] == SDL_PIXELTYPE_INDEX8)))
  }
  SDL_ISPIXELFORMAT_PACKED = -> (format) {
    (!SDL_ISPIXELFORMAT_FOURCC[format] &&
      ((SDL_PIXELTYPE[format] == SDL_PIXELTYPE_PACKED8) || (SDL_PIXELTYPE[format] == SDL_PIXELTYPE_PACKED16) || (SDL_PIXELTYPE[format] == SDL_PIXELTYPE_PACKED32)))
  }
  SDL_ISPIXELFORMAT_ARRAY = -> (format) {  (!SDL_ISPIXELFORMAT_FOURCC[format] &&
      ((SDL_PIXELTYPE[format] == SDL_PIXELTYPE_ARRAYU8) || (SDL_PIXELTYPE[format] == SDL_PIXELTYPE_ARRAYU16) || (SDL_PIXELTYPE[format] == SDL_PIXELTYPE_ARRAYU32) || (SDL_PIXELTYPE[format] == SDL_PIXELTYPE_ARRAYF16) || (SDL_PIXELTYPE[format] == SDL_PIXELTYPE_ARRAYF32)))
  }
  SDL_ISPIXELFORMAT_ALPHA = -> (format) {  ((SDL_ISPIXELFORMAT_PACKED[format] &&
      ((SDL_PIXELORDER[format] == SDL_PACKEDORDER_ARGB) ||
          (SDL_PIXELORDER[format] == SDL_PACKEDORDER_RGBA) ||
          (SDL_PIXELORDER[format] == SDL_PACKEDORDER_ABGR) ||
          (SDL_PIXELORDER[format] == SDL_PACKEDORDER_BGRA))) ||
      (SDL_ISPIXELFORMAT_ARRAY[format] &&
          ((SDL_PIXELORDER[format] == SDL_ARRAYORDER_ARGB) ||
              (SDL_PIXELORDER[format] == SDL_ARRAYORDER_RGBA) ||
              (SDL_PIXELORDER[format] == SDL_ARRAYORDER_ABGR) ||
              (SDL_PIXELORDER[format] == SDL_ARRAYORDER_BGRA))))
  }

  # The flag is set to 1 because 0x1? is not in the printable ASCII range
  SDL_ISPIXELFORMAT_FOURCC = -> (format) { (format && (SDL_PIXELFLAG[format] != 1)) }

  # Note: If you modify this list, update SDL_GetPixelFormatName()
  SDL_PIXELFORMAT_UNKNOWN = 0
  SDL_PIXELFORMAT_INDEX1LSB = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_4321, 0, 1, 0]
  SDL_PIXELFORMAT_INDEX1MSB = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_1234, 0, 1, 0]
  SDL_PIXELFORMAT_INDEX4LSB = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_4321, 0, 4, 0]
  SDL_PIXELFORMAT_INDEX4MSB = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_1234, 0, 4, 0]
  SDL_PIXELFORMAT_INDEX8    = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_INDEX8, 0, 0, 8, 1]
  SDL_PIXELFORMAT_RGB332   = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED8, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_332, 8, 1]
  SDL_PIXELFORMAT_RGB444   = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_4444, 12, 2]
  SDL_PIXELFORMAT_RGB555   = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_1555, 15, 2]
  SDL_PIXELFORMAT_BGR555   = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_1555, 15, 2]
  SDL_PIXELFORMAT_ARGB4444 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_4444, 16, 2]
  SDL_PIXELFORMAT_RGBA4444 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_4444, 16, 2]
  SDL_PIXELFORMAT_ABGR4444 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_4444, 16, 2]
  SDL_PIXELFORMAT_BGRA4444 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_4444, 16, 2]
  SDL_PIXELFORMAT_ARGB1555 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_1555, 16, 2]
  SDL_PIXELFORMAT_RGBA5551 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_5551, 16, 2]
  SDL_PIXELFORMAT_ABGR1555 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_1555, 16, 2]
  SDL_PIXELFORMAT_BGRA5551 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_5551, 16, 2]
  SDL_PIXELFORMAT_RGB565   = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_565, 16, 2]
  SDL_PIXELFORMAT_BGR565   = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_565, 16, 2]
  SDL_PIXELFORMAT_RGB24    = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_RGB, 0, 24, 3]
  SDL_PIXELFORMAT_BGR24    = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_BGR, 0, 24, 3]
  SDL_PIXELFORMAT_RGB888   = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_8888, 24, 4]
  SDL_PIXELFORMAT_RGBX8888 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBX, SDL_PACKEDLAYOUT_8888, 24, 4]
  SDL_PIXELFORMAT_BGR888   = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_8888, 24, 4]
  SDL_PIXELFORMAT_BGRX8888 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRX, SDL_PACKEDLAYOUT_8888, 24, 4]
  SDL_PIXELFORMAT_ARGB8888 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_8888, 32, 4]
  SDL_PIXELFORMAT_RGBA8888 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4]
  SDL_PIXELFORMAT_ABGR8888 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_8888, 32, 4]
  SDL_PIXELFORMAT_BGRA8888 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_8888, 32, 4]
  SDL_PIXELFORMAT_ARGB2101010 = SDL_DEFINE_PIXELFORMAT[SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_2101010, 32, 4]

  if false # SDL_BYTEORDER == SDL_BIG_ENDIAN
    SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_RGBA8888
    SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_ARGB8888
    SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_BGRA8888
    SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_ABGR8888
  else
    SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888
    SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888
    SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888
    SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888
  end

  SDL_PIXELFORMAT_YV12 = SDL_DEFINE_PIXELFOURCC['Y', 'V', '1', '2']   # Planar mode: Y + V + U  (3 planes)
  SDL_PIXELFORMAT_IYUV = SDL_DEFINE_PIXELFOURCC['I', 'Y', 'U', 'V']   # Planar mode: Y + U + V  (3 planes)
  SDL_PIXELFORMAT_YUY2 = SDL_DEFINE_PIXELFOURCC['Y', 'U', 'Y', '2']   # Packed mode: Y0+U0+Y1+V0 (1 plane)
  SDL_PIXELFORMAT_UYVY = SDL_DEFINE_PIXELFOURCC['U', 'Y', 'V', 'Y']   # Packed mode: U0+Y0+V0+Y1 (1 plane)
  SDL_PIXELFORMAT_YVYU = SDL_DEFINE_PIXELFOURCC['Y', 'V', 'Y', 'U']   # Packed mode: Y0+V0+Y1+U0 (1 plane)
  SDL_PIXELFORMAT_NV12 = SDL_DEFINE_PIXELFOURCC['N', 'V', '1', '2']   # Planar mode: Y + U/V interleaved  (2 planes)
  SDL_PIXELFORMAT_NV21 = SDL_DEFINE_PIXELFOURCC['N', 'V', '2', '1']   # Planar mode: Y + V/U interleaved  (2 planes)

  SDL_Color = struct(['Uint8 r', 'Uint8 g', 'Uint8 b', 'Uint8 a'])
  typealias 'SDL_Color', 'void*'

  SDL_Palette = struct([
      'int ncolors',
      'SDL_Color *colors',
      'Uint32 version',
      'int refcount'
  ])
  typealias 'SDL_Palette', 'void*'

  SDL_PixelFormat = struct([
      'Uint32 format',
      'SDL_Palette *palette',
      'Uint8 BitsPerPixel',
      'Uint8 BytesPerPixel',
      'Uint8 padding[2]',
      'Uint32 Rmask',
      'Uint32 Gmask',
      'Uint32 Bmask',
      'Uint32 Amask',
      'Uint8 Rloss',
      'Uint8 Gloss',
      'Uint8 Bloss',
      'Uint8 Aloss',
      'Uint8 Rshift',
      'Uint8 Gshift',
      'Uint8 Bshift',
      'Uint8 Ashift',
      'int refcount',
      'void * next' # struct SDL_PixelFormat *next
  ])
  typealias 'SDL_PixelFormat', 'void*'

  extern 'const char* SDL_GetPixelFormatName(Uint32 format)'
  extern 'SDL_bool SDL_PixelFormatEnumToMasks(Uint32 format, int *bpp, Uint32 * Rmask, Uint32 * Gmask, Uint32 * Bmask, Uint32 * Amask)'
  extern 'Uint32 SDL_MasksToPixelFormatEnum(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)'
  extern 'SDL_PixelFormat * SDL_AllocFormat(Uint32 pixel_format)'
  extern 'void SDL_FreeFormat(SDL_PixelFormat *format)'
  extern 'SDL_Palette *SDL_AllocPalette(int ncolors)'
  extern 'int SDL_SetPixelFormatPalette(SDL_PixelFormat * format, SDL_Palette *palette)'
  extern 'int SDL_SetPaletteColors(SDL_Palette * palette, const SDL_Color * colors, int firstcolor, int ncolors)'
  extern 'void SDL_FreePalette(SDL_Palette * palette)'
  extern 'Uint32 SDL_MapRGB(const SDL_PixelFormat * format, Uint8 r, Uint8 g, Uint8 b)'
  extern 'Uint32 SDL_MapRGBA(const SDL_PixelFormat * format, Uint8 r, Uint8 g, Uint8 b, Uint8 a)'
  extern 'void SDL_GetRGB(Uint32 pixel, const SDL_PixelFormat * format, Uint8 * r, Uint8 * g, Uint8 * b)'
  extern 'void SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormat * format, Uint8 * r, Uint8 * g, Uint8 * b, Uint8 * a)'
  extern 'void SDL_CalculateGammaRamp(float gamma, Uint16 * ramp)'
end